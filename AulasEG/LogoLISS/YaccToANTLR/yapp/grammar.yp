%{
%}

%token STRING_TERMINAL STRING_NON_TERMINAL SEPARATOR

%%
productions : production             { return $_[1]; }
            | productions production {
                                       push @{$_[1]},@{$_[2]};
                                       return $_[1];
                                     }
            ;

production  : nonTerminal ':' derivs ';' { return [ { $_[1] => $_[3] } ]; }
            ;

derivs      : nts            { return [$_[1]]; }
            | derivs '|' nts {
                               push @{$_[1]},$_[3];
                               return $_[1];
			                 }
            |                { return [[ { 'epsilon' => 'epsilon' } ]]; }
            ;
nts         : nt     { return $_[1]; }
            | nts nt {
                       push @{$_[1]},@{$_[2]};
					   return $_[1];
                     }
            ;
nt          : terminal    {
                            return [ { $_[1] => 'terminal' } ];
                          }
            | nonTerminal {
                            return [ { $_[1] => 'nonTerminal' } ];
                          }
            | sep         {
                            return [ { $_[1] => 'sep' } ];
                          }
            ;
terminal    : STRING_TERMINAL     {
                                    return $_[1];
                                  }
            ;
nonTerminal : STRING_NON_TERMINAL {
                                    return $_[1];
                                  }
            ;
sep         : SEPARATOR           {
                                    return $_[1];
                                  }
            ;

%%
package main;
use Data::Dumper;
use strict;

our($debug);

#$debug = 1;

my $parser=new YaccToANTLR();
my $text = init_lex();

if($debug) {testlex(); exit 0;}

my $value=$parser->YYParse(yylex => \&lex, yyerror => \&yyerror);

sub yyerror {
    print  STDERR "Syntax Error:";
    if ($_[0]->YYCurtok) {
        printf STDERR (' a "%s" (%s) was found where "%s" was expected'."\n",
        $_[0]->YYCurtok, $_[0]->YYCurval, $_[0]->YYExpect)
    }
    else{ print STDERR "Expecting one of ",join(", ",$_[0]->YYExpect),"\n";}
}

sub testlex {
    my ($t,$e)=lex();
    while($t){
        print "T=$t V=$e\n";
        ($t,$e)=lex();
    }
}

sub init_lex{ join("", <>) ; }

sub lex {
    for($text){
        s/^[ \t\n\r]+//          ;
        s/^([A-Z_]\w*[a-z_])//  and return ("STRING_NON_TERMINAL", $1);
        s/^([A-Z]+)//           and return ("STRING_TERMINAL", $1);
        s/^([:;|])//            and return ($1, $1);
        s/^(['"]\W['"])//       and return ("SEPARATOR", $1);

        return ('',undef);
        print STDERR "Erro: unknown char <$_>\n";
    }
}

sub main {
	for my $elem ( @{$value} ) {
		my %production = %{$elem};
		for my $prod_name (keys %production) {
			my $list_productions = $production{$prod_name};
			prettyPrint(  removeLeftRecursion($prod_name,$list_productions) ) ;
			#print Dumper $list_productions;
		}
	}
}

sub removeLeftRecursion {
	my $prod_name = $_[0];
	my $list_productions = $_[1];

	#print "<" . $prod_name . ">" . "\n";

	my $foundLeftRecursion = 0;
	my @derivs;
	my $i = 0;
	my $j = 0;
	my $i_ = 0;
	my $j_ = 0;

	for my $elem1 ( @{$list_productions} ) {
		for my $elem2 ( @{$elem1} ) {
			my %deriv = %{$elem2};
			if( $deriv{$prod_name} ) {
				$foundLeftRecursion = 1;
				$i_ = $i;
				$j_ = $j;
			}
			$j++;
		}
		$i++;
	}
	
	my $found=0;
	my @r;
	my @ret;

	# here we have the production derivation we found the left recursion
	# for the following example, here we have the second line.
	# Expression : Single_Expression
	#            | Expression Rel_Op Single_Expression
	if($foundLeftRecursion) {
		for my $e (@{@{$list_productions}[$i_]}) {
			my %h = %{$e};
			for my $k (keys %h) {
				if($found) {
					push(@r , {$k => $h{$k}});
				}
				if($k eq $prod_name) {
					$found = 1;
				}
			}
		}
	
		$i = 0;

		for my $elem (@{$list_productions}) {
			if($i == $i_) {
				push(@ret , { [@r] => 'plus'} );
			} else {
				push(@ret , { @{$list_productions}[$i] => 'void'} );
			}
			$i++;
		}
	} else {
		for my $e (@{$list_productions}) {
			push(@ret , {$e => 'void'});
		}
	}
	#print Dumper [@ret];

	return [@ret] ;
	
#	$list_productions =
#		[
#			[
#				{
#					'Declaration' => 'nonTerminal'
#				}
#			],
#			[
#				{
#					'Declarations' => 'nonTerminal'
#				},
#				{
#					'Declaration' => 'nonTerminal'
#				}
#			]
#		];
}

sub prettyPrint {
	my $grammar = $_[0];
	my $key;
	my $value;

	for my $e ( @{$grammar} ) {
		my %h = %{$e};
		for my $f ( values %h ) {
			while( ($key, $value) = each %h ) {
				print Dumper @{$key};
			}
		}
	}
}

main();

